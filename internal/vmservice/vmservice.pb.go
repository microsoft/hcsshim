// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.23.2
// source: github.com/Microsoft/hcsshim/internal/vmservice/vmservice.proto

package vmservice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModifyType int32

const (
	ModifyType_ADD    ModifyType = 0
	ModifyType_REMOVE ModifyType = 1
	ModifyType_UPDATE ModifyType = 2
)

// Enum value maps for ModifyType.
var (
	ModifyType_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
		2: "UPDATE",
	}
	ModifyType_value = map[string]int32{
		"ADD":    0,
		"REMOVE": 1,
		"UPDATE": 2,
	}
)

func (x ModifyType) Enum() *ModifyType {
	p := new(ModifyType)
	*p = x
	return p
}

func (x ModifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes[0].Descriptor()
}

func (ModifyType) Type() protoreflect.EnumType {
	return &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes[0]
}

func (x ModifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModifyType.Descriptor instead.
func (ModifyType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{0}
}

type DiskType int32

const (
	DiskType_SCSI_DISK_TYPE_VHD1     DiskType = 0
	DiskType_SCSI_DISK_TYPE_VHDX     DiskType = 1
	DiskType_SCSI_DISK_TYPE_PHYSICAL DiskType = 2
)

// Enum value maps for DiskType.
var (
	DiskType_name = map[int32]string{
		0: "SCSI_DISK_TYPE_VHD1",
		1: "SCSI_DISK_TYPE_VHDX",
		2: "SCSI_DISK_TYPE_PHYSICAL",
	}
	DiskType_value = map[string]int32{
		"SCSI_DISK_TYPE_VHD1":     0,
		"SCSI_DISK_TYPE_VHDX":     1,
		"SCSI_DISK_TYPE_PHYSICAL": 2,
	}
)

func (x DiskType) Enum() *DiskType {
	p := new(DiskType)
	*p = x
	return p
}

func (x DiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes[1].Descriptor()
}

func (DiskType) Type() protoreflect.EnumType {
	return &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes[1]
}

func (x DiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskType.Descriptor instead.
func (DiskType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{1}
}

type PropertiesVMRequest_PropertiesType int32

const (
	PropertiesVMRequest_Memory    PropertiesVMRequest_PropertiesType = 0
	PropertiesVMRequest_Processor PropertiesVMRequest_PropertiesType = 1
)

// Enum value maps for PropertiesVMRequest_PropertiesType.
var (
	PropertiesVMRequest_PropertiesType_name = map[int32]string{
		0: "Memory",
		1: "Processor",
	}
	PropertiesVMRequest_PropertiesType_value = map[string]int32{
		"Memory":    0,
		"Processor": 1,
	}
)

func (x PropertiesVMRequest_PropertiesType) Enum() *PropertiesVMRequest_PropertiesType {
	p := new(PropertiesVMRequest_PropertiesType)
	*p = x
	return p
}

func (x PropertiesVMRequest_PropertiesType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertiesVMRequest_PropertiesType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes[2].Descriptor()
}

func (PropertiesVMRequest_PropertiesType) Type() protoreflect.EnumType {
	return &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes[2]
}

func (x PropertiesVMRequest_PropertiesType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertiesVMRequest_PropertiesType.Descriptor instead.
func (PropertiesVMRequest_PropertiesType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{13, 0}
}

type CapabilitiesVMResponse_Resource int32

const (
	CapabilitiesVMResponse_Vpmem     CapabilitiesVMResponse_Resource = 0
	CapabilitiesVMResponse_Scsi      CapabilitiesVMResponse_Resource = 1
	CapabilitiesVMResponse_Vpci      CapabilitiesVMResponse_Resource = 2
	CapabilitiesVMResponse_Plan9     CapabilitiesVMResponse_Resource = 3
	CapabilitiesVMResponse_VMNic     CapabilitiesVMResponse_Resource = 4
	CapabilitiesVMResponse_Memory    CapabilitiesVMResponse_Resource = 5
	CapabilitiesVMResponse_Processor CapabilitiesVMResponse_Resource = 6
)

// Enum value maps for CapabilitiesVMResponse_Resource.
var (
	CapabilitiesVMResponse_Resource_name = map[int32]string{
		0: "Vpmem",
		1: "Scsi",
		2: "Vpci",
		3: "Plan9",
		4: "VMNic",
		5: "Memory",
		6: "Processor",
	}
	CapabilitiesVMResponse_Resource_value = map[string]int32{
		"Vpmem":     0,
		"Scsi":      1,
		"Vpci":      2,
		"Plan9":     3,
		"VMNic":     4,
		"Memory":    5,
		"Processor": 6,
	}
)

func (x CapabilitiesVMResponse_Resource) Enum() *CapabilitiesVMResponse_Resource {
	p := new(CapabilitiesVMResponse_Resource)
	*p = x
	return p
}

func (x CapabilitiesVMResponse_Resource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapabilitiesVMResponse_Resource) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes[3].Descriptor()
}

func (CapabilitiesVMResponse_Resource) Type() protoreflect.EnumType {
	return &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes[3]
}

func (x CapabilitiesVMResponse_Resource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapabilitiesVMResponse_Resource.Descriptor instead.
func (CapabilitiesVMResponse_Resource) EnumDescriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{15, 0}
}

type CapabilitiesVMResponse_SupportedGuestOS int32

const (
	CapabilitiesVMResponse_Windows CapabilitiesVMResponse_SupportedGuestOS = 0
	CapabilitiesVMResponse_Linux   CapabilitiesVMResponse_SupportedGuestOS = 1
)

// Enum value maps for CapabilitiesVMResponse_SupportedGuestOS.
var (
	CapabilitiesVMResponse_SupportedGuestOS_name = map[int32]string{
		0: "Windows",
		1: "Linux",
	}
	CapabilitiesVMResponse_SupportedGuestOS_value = map[string]int32{
		"Windows": 0,
		"Linux":   1,
	}
)

func (x CapabilitiesVMResponse_SupportedGuestOS) Enum() *CapabilitiesVMResponse_SupportedGuestOS {
	p := new(CapabilitiesVMResponse_SupportedGuestOS)
	*p = x
	return p
}

func (x CapabilitiesVMResponse_SupportedGuestOS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapabilitiesVMResponse_SupportedGuestOS) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes[4].Descriptor()
}

func (CapabilitiesVMResponse_SupportedGuestOS) Type() protoreflect.EnumType {
	return &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes[4]
}

func (x CapabilitiesVMResponse_SupportedGuestOS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapabilitiesVMResponse_SupportedGuestOS.Descriptor instead.
func (CapabilitiesVMResponse_SupportedGuestOS) EnumDescriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{15, 1}
}

type DirectBoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KernelPath    string `protobuf:"bytes,1,opt,name=kernel_path,json=kernelPath,proto3" json:"kernel_path,omitempty"`
	InitrdPath    string `protobuf:"bytes,2,opt,name=initrd_path,json=initrdPath,proto3" json:"initrd_path,omitempty"`
	KernelCmdline string `protobuf:"bytes,3,opt,name=kernel_cmdline,json=kernelCmdline,proto3" json:"kernel_cmdline,omitempty"`
}

func (x *DirectBoot) Reset() {
	*x = DirectBoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectBoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectBoot) ProtoMessage() {}

func (x *DirectBoot) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectBoot.ProtoReflect.Descriptor instead.
func (*DirectBoot) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{0}
}

func (x *DirectBoot) GetKernelPath() string {
	if x != nil {
		return x.KernelPath
	}
	return ""
}

func (x *DirectBoot) GetInitrdPath() string {
	if x != nil {
		return x.InitrdPath
	}
	return ""
}

func (x *DirectBoot) GetKernelCmdline() string {
	if x != nil {
		return x.KernelCmdline
	}
	return ""
}

type UEFI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwarePath string `protobuf:"bytes,1,opt,name=firmware_path,json=firmwarePath,proto3" json:"firmware_path,omitempty"`
	DevicePath   string `protobuf:"bytes,2,opt,name=device_path,json=devicePath,proto3" json:"device_path,omitempty"`
	// Optional data to include for uefi boot. For Linux this could be used as the kernel
	// commandline.
	OptionalData string `protobuf:"bytes,3,opt,name=optional_data,json=optionalData,proto3" json:"optional_data,omitempty"`
}

func (x *UEFI) Reset() {
	*x = UEFI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UEFI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEFI) ProtoMessage() {}

func (x *UEFI) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEFI.ProtoReflect.Descriptor instead.
func (*UEFI) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{1}
}

func (x *UEFI) GetFirmwarePath() string {
	if x != nil {
		return x.FirmwarePath
	}
	return ""
}

func (x *UEFI) GetDevicePath() string {
	if x != nil {
		return x.DevicePath
	}
	return ""
}

func (x *UEFI) GetOptionalData() string {
	if x != nil {
		return x.OptionalData
	}
	return ""
}

type MemoryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryMb         uint64 `protobuf:"varint,1,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	AllowOvercommit  bool   `protobuf:"varint,2,opt,name=allow_overcommit,json=allowOvercommit,proto3" json:"allow_overcommit,omitempty"`
	DeferredCommit   bool   `protobuf:"varint,3,opt,name=deferred_commit,json=deferredCommit,proto3" json:"deferred_commit,omitempty"`
	HotHint          bool   `protobuf:"varint,4,opt,name=hot_hint,json=hotHint,proto3" json:"hot_hint,omitempty"`
	ColdHint         bool   `protobuf:"varint,5,opt,name=cold_hint,json=coldHint,proto3" json:"cold_hint,omitempty"`
	ColdDiscardHint  bool   `protobuf:"varint,6,opt,name=cold_discard_hint,json=coldDiscardHint,proto3" json:"cold_discard_hint,omitempty"`
	LowMmioGapInMb   uint64 `protobuf:"varint,7,opt,name=low_mmio_gap_in_mb,json=lowMmioGapInMb,proto3" json:"low_mmio_gap_in_mb,omitempty"`
	HighMmioBaseInMb uint64 `protobuf:"varint,8,opt,name=high_mmio_base_in_mb,json=highMmioBaseInMb,proto3" json:"high_mmio_base_in_mb,omitempty"`
	HighMmioGapInMb  uint64 `protobuf:"varint,9,opt,name=high_mmio_gap_in_mb,json=highMmioGapInMb,proto3" json:"high_mmio_gap_in_mb,omitempty"`
}

func (x *MemoryConfig) Reset() {
	*x = MemoryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryConfig) ProtoMessage() {}

func (x *MemoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryConfig.ProtoReflect.Descriptor instead.
func (*MemoryConfig) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{2}
}

func (x *MemoryConfig) GetMemoryMb() uint64 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *MemoryConfig) GetAllowOvercommit() bool {
	if x != nil {
		return x.AllowOvercommit
	}
	return false
}

func (x *MemoryConfig) GetDeferredCommit() bool {
	if x != nil {
		return x.DeferredCommit
	}
	return false
}

func (x *MemoryConfig) GetHotHint() bool {
	if x != nil {
		return x.HotHint
	}
	return false
}

func (x *MemoryConfig) GetColdHint() bool {
	if x != nil {
		return x.ColdHint
	}
	return false
}

func (x *MemoryConfig) GetColdDiscardHint() bool {
	if x != nil {
		return x.ColdDiscardHint
	}
	return false
}

func (x *MemoryConfig) GetLowMmioGapInMb() uint64 {
	if x != nil {
		return x.LowMmioGapInMb
	}
	return 0
}

func (x *MemoryConfig) GetHighMmioBaseInMb() uint64 {
	if x != nil {
		return x.HighMmioBaseInMb
	}
	return 0
}

func (x *MemoryConfig) GetHighMmioGapInMb() uint64 {
	if x != nil {
		return x.HighMmioGapInMb
	}
	return 0
}

type ProcessorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessorCount  uint32 `protobuf:"varint,1,opt,name=processor_count,json=processorCount,proto3" json:"processor_count,omitempty"`
	ProcessorWeight uint32 `protobuf:"varint,2,opt,name=processor_weight,json=processorWeight,proto3" json:"processor_weight,omitempty"`
	ProcessorLimit  uint32 `protobuf:"varint,3,opt,name=processor_limit,json=processorLimit,proto3" json:"processor_limit,omitempty"`
}

func (x *ProcessorConfig) Reset() {
	*x = ProcessorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorConfig) ProtoMessage() {}

func (x *ProcessorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorConfig.ProtoReflect.Descriptor instead.
func (*ProcessorConfig) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessorConfig) GetProcessorCount() uint32 {
	if x != nil {
		return x.ProcessorCount
	}
	return 0
}

func (x *ProcessorConfig) GetProcessorWeight() uint32 {
	if x != nil {
		return x.ProcessorWeight
	}
	return 0
}

func (x *ProcessorConfig) GetProcessorLimit() uint32 {
	if x != nil {
		return x.ProcessorLimit
	}
	return 0
}

type DevicesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScsiDisks     []*SCSIDisk         `protobuf:"bytes,1,rep,name=scsi_disks,json=scsiDisks,proto3" json:"scsi_disks,omitempty"`
	VpmemDisks    []*VPMEMDisk        `protobuf:"bytes,2,rep,name=vpmem_disks,json=vpmemDisks,proto3" json:"vpmem_disks,omitempty"`
	NicConfig     []*NICConfig        `protobuf:"bytes,3,rep,name=nic_config,json=nicConfig,proto3" json:"nic_config,omitempty"`
	WindowsDevice []*WindowsPCIDevice `protobuf:"bytes,4,rep,name=windows_device,json=windowsDevice,proto3" json:"windows_device,omitempty"`
}

func (x *DevicesConfig) Reset() {
	*x = DevicesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesConfig) ProtoMessage() {}

func (x *DevicesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesConfig.ProtoReflect.Descriptor instead.
func (*DevicesConfig) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{4}
}

func (x *DevicesConfig) GetScsiDisks() []*SCSIDisk {
	if x != nil {
		return x.ScsiDisks
	}
	return nil
}

func (x *DevicesConfig) GetVpmemDisks() []*VPMEMDisk {
	if x != nil {
		return x.VpmemDisks
	}
	return nil
}

func (x *DevicesConfig) GetNicConfig() []*NICConfig {
	if x != nil {
		return x.NicConfig
	}
	return nil
}

func (x *DevicesConfig) GetWindowsDevice() []*WindowsPCIDevice {
	if x != nil {
		return x.WindowsDevice
	}
	return nil
}

type VMConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryConfig    *MemoryConfig    `protobuf:"bytes,1,opt,name=memory_config,json=memoryConfig,proto3" json:"memory_config,omitempty"`
	ProcessorConfig *ProcessorConfig `protobuf:"bytes,2,opt,name=processor_config,json=processorConfig,proto3" json:"processor_config,omitempty"`
	DevicesConfig   *DevicesConfig   `protobuf:"bytes,3,opt,name=devices_config,json=devicesConfig,proto3" json:"devices_config,omitempty"`
	SerialConfig    *SerialConfig    `protobuf:"bytes,4,opt,name=serial_config,json=serialConfig,proto3" json:"serial_config,omitempty"`
	// Types that are assignable to BootConfig:
	//
	//	*VMConfig_DirectBoot
	//	*VMConfig_Uefi
	BootConfig     isVMConfig_BootConfig `protobuf_oneof:"BootConfig"`
	WindowsOptions *WindowsOptions       `protobuf:"bytes,7,opt,name=windows_options,json=windowsOptions,proto3" json:"windows_options,omitempty"`
	// Optional k:v extra data. Up to the virtstack for how to interpret this.
	ExtraData map[string]string `protobuf:"bytes,8,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VMConfig) Reset() {
	*x = VMConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMConfig) ProtoMessage() {}

func (x *VMConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMConfig.ProtoReflect.Descriptor instead.
func (*VMConfig) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{5}
}

func (x *VMConfig) GetMemoryConfig() *MemoryConfig {
	if x != nil {
		return x.MemoryConfig
	}
	return nil
}

func (x *VMConfig) GetProcessorConfig() *ProcessorConfig {
	if x != nil {
		return x.ProcessorConfig
	}
	return nil
}

func (x *VMConfig) GetDevicesConfig() *DevicesConfig {
	if x != nil {
		return x.DevicesConfig
	}
	return nil
}

func (x *VMConfig) GetSerialConfig() *SerialConfig {
	if x != nil {
		return x.SerialConfig
	}
	return nil
}

func (m *VMConfig) GetBootConfig() isVMConfig_BootConfig {
	if m != nil {
		return m.BootConfig
	}
	return nil
}

func (x *VMConfig) GetDirectBoot() *DirectBoot {
	if x, ok := x.GetBootConfig().(*VMConfig_DirectBoot); ok {
		return x.DirectBoot
	}
	return nil
}

func (x *VMConfig) GetUefi() *UEFI {
	if x, ok := x.GetBootConfig().(*VMConfig_Uefi); ok {
		return x.Uefi
	}
	return nil
}

func (x *VMConfig) GetWindowsOptions() *WindowsOptions {
	if x != nil {
		return x.WindowsOptions
	}
	return nil
}

func (x *VMConfig) GetExtraData() map[string]string {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type isVMConfig_BootConfig interface {
	isVMConfig_BootConfig()
}

type VMConfig_DirectBoot struct {
	DirectBoot *DirectBoot `protobuf:"bytes,5,opt,name=direct_boot,json=directBoot,proto3,oneof"`
}

type VMConfig_Uefi struct {
	Uefi *UEFI `protobuf:"bytes,6,opt,name=uefi,proto3,oneof"`
}

func (*VMConfig_DirectBoot) isVMConfig_BootConfig() {}

func (*VMConfig_Uefi) isVMConfig_BootConfig() {}

// WindowsOptions contains virtual machine configurations that are only present on a Windows host.
type WindowsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuGroupID uint64 `protobuf:"varint,1,opt,name=cpu_group_id,json=cpuGroupId,proto3" json:"cpu_group_id,omitempty"`
}

func (x *WindowsOptions) Reset() {
	*x = WindowsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsOptions) ProtoMessage() {}

func (x *WindowsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsOptions.ProtoReflect.Descriptor instead.
func (*WindowsOptions) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{6}
}

func (x *WindowsOptions) GetCpuGroupID() uint64 {
	if x != nil {
		return x.CpuGroupID
	}
	return 0
}

type SerialConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ports []*SerialConfig_Config `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *SerialConfig) Reset() {
	*x = SerialConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialConfig) ProtoMessage() {}

func (x *SerialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialConfig.ProtoReflect.Descriptor instead.
func (*SerialConfig) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{7}
}

func (x *SerialConfig) GetPorts() []*SerialConfig_Config {
	if x != nil {
		return x.Ports
	}
	return nil
}

type CreateVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *VMConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Optional ID to be used by the VM service in log messages. It's up to the
	// virtstack to make use of this field. Useful for debugging to be able to
	// correlate events for a given vm that the client launched.
	LogID string `protobuf:"bytes,2,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
}

func (x *CreateVMRequest) Reset() {
	*x = CreateVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMRequest) ProtoMessage() {}

func (x *CreateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMRequest.ProtoReflect.Descriptor instead.
func (*CreateVMRequest) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{8}
}

func (x *CreateVMRequest) GetConfig() *VMConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateVMRequest) GetLogID() string {
	if x != nil {
		return x.LogID
	}
	return ""
}

type InspectVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query          string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	RecursionLimit uint32 `protobuf:"varint,2,opt,name=recursion_limit,json=recursionLimit,proto3" json:"recursion_limit,omitempty"`
}

func (x *InspectVMRequest) Reset() {
	*x = InspectVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectVMRequest) ProtoMessage() {}

func (x *InspectVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectVMRequest.ProtoReflect.Descriptor instead.
func (*InspectVMRequest) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{9}
}

func (x *InspectVMRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *InspectVMRequest) GetRecursionLimit() uint32 {
	if x != nil {
		return x.RecursionLimit
	}
	return 0
}

type InspectVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *structpb.Value `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *InspectVMResponse) Reset() {
	*x = InspectVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectVMResponse) ProtoMessage() {}

func (x *InspectVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectVMResponse.ProtoReflect.Descriptor instead.
func (*InspectVMResponse) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{10}
}

func (x *InspectVMResponse) GetResult() *structpb.Value {
	if x != nil {
		return x.Result
	}
	return nil
}

type MemoryStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkingSetBytes uint64 `protobuf:"varint,1,opt,name=working_set_bytes,json=workingSetBytes,proto3" json:"working_set_bytes,omitempty"`
	AvailableMemory uint64 `protobuf:"varint,2,opt,name=available_memory,json=availableMemory,proto3" json:"available_memory,omitempty"`
	ReservedMemory  uint64 `protobuf:"varint,3,opt,name=reserved_memory,json=reservedMemory,proto3" json:"reserved_memory,omitempty"`
	AssignedMemory  uint64 `protobuf:"varint,4,opt,name=assigned_memory,json=assignedMemory,proto3" json:"assigned_memory,omitempty"`
}

func (x *MemoryStats) Reset() {
	*x = MemoryStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStats) ProtoMessage() {}

func (x *MemoryStats) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStats.ProtoReflect.Descriptor instead.
func (*MemoryStats) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{11}
}

func (x *MemoryStats) GetWorkingSetBytes() uint64 {
	if x != nil {
		return x.WorkingSetBytes
	}
	return 0
}

func (x *MemoryStats) GetAvailableMemory() uint64 {
	if x != nil {
		return x.AvailableMemory
	}
	return 0
}

func (x *MemoryStats) GetReservedMemory() uint64 {
	if x != nil {
		return x.ReservedMemory
	}
	return 0
}

func (x *MemoryStats) GetAssignedMemory() uint64 {
	if x != nil {
		return x.AssignedMemory
	}
	return 0
}

type ProcessorStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRuntimeNs uint64 `protobuf:"varint,1,opt,name=total_runtime_ns,json=totalRuntimeNs,proto3" json:"total_runtime_ns,omitempty"`
}

func (x *ProcessorStats) Reset() {
	*x = ProcessorStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorStats) ProtoMessage() {}

func (x *ProcessorStats) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorStats.ProtoReflect.Descriptor instead.
func (*ProcessorStats) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{12}
}

func (x *ProcessorStats) GetTotalRuntimeNs() uint64 {
	if x != nil {
		return x.TotalRuntimeNs
	}
	return 0
}

type PropertiesVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []PropertiesVMRequest_PropertiesType `protobuf:"varint,1,rep,packed,name=types,proto3,enum=vmservice.PropertiesVMRequest_PropertiesType" json:"types,omitempty"`
}

func (x *PropertiesVMRequest) Reset() {
	*x = PropertiesVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertiesVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertiesVMRequest) ProtoMessage() {}

func (x *PropertiesVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertiesVMRequest.ProtoReflect.Descriptor instead.
func (*PropertiesVMRequest) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{13}
}

func (x *PropertiesVMRequest) GetTypes() []PropertiesVMRequest_PropertiesType {
	if x != nil {
		return x.Types
	}
	return nil
}

type PropertiesVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryStats    *MemoryStats    `protobuf:"bytes,1,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty"`
	ProcessorStats *ProcessorStats `protobuf:"bytes,2,opt,name=processor_stats,json=processorStats,proto3" json:"processor_stats,omitempty"`
}

func (x *PropertiesVMResponse) Reset() {
	*x = PropertiesVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertiesVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertiesVMResponse) ProtoMessage() {}

func (x *PropertiesVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertiesVMResponse.ProtoReflect.Descriptor instead.
func (*PropertiesVMResponse) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{14}
}

func (x *PropertiesVMResponse) GetMemoryStats() *MemoryStats {
	if x != nil {
		return x.MemoryStats
	}
	return nil
}

func (x *PropertiesVMResponse) GetProcessorStats() *ProcessorStats {
	if x != nil {
		return x.ProcessorStats
	}
	return nil
}

type CapabilitiesVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportedResources []*CapabilitiesVMResponse_SupportedResource `protobuf:"bytes,1,rep,name=supported_resources,json=supportedResources,proto3" json:"supported_resources,omitempty"`
	SupportedGuestOS   []CapabilitiesVMResponse_SupportedGuestOS   `protobuf:"varint,2,rep,packed,name=supported_guest_os,json=supportedGuestOs,proto3,enum=vmservice.CapabilitiesVMResponse_SupportedGuestOS" json:"supported_guest_os,omitempty"`
}

func (x *CapabilitiesVMResponse) Reset() {
	*x = CapabilitiesVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilitiesVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesVMResponse) ProtoMessage() {}

func (x *CapabilitiesVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesVMResponse.ProtoReflect.Descriptor instead.
func (*CapabilitiesVMResponse) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{15}
}

func (x *CapabilitiesVMResponse) GetSupportedResources() []*CapabilitiesVMResponse_SupportedResource {
	if x != nil {
		return x.SupportedResources
	}
	return nil
}

func (x *CapabilitiesVMResponse) GetSupportedGuestOS() []CapabilitiesVMResponse_SupportedGuestOS {
	if x != nil {
		return x.SupportedGuestOS
	}
	return nil
}

type HVSocketListen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceID string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Expected that the listener is a unix domain socket. These
	// are supported on Windows as of 1809/RS5.
	ListenerPath string `protobuf:"bytes,2,opt,name=listener_path,json=listenerPath,proto3" json:"listener_path,omitempty"`
}

func (x *HVSocketListen) Reset() {
	*x = HVSocketListen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HVSocketListen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HVSocketListen) ProtoMessage() {}

func (x *HVSocketListen) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HVSocketListen.ProtoReflect.Descriptor instead.
func (*HVSocketListen) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{16}
}

func (x *HVSocketListen) GetServiceID() string {
	if x != nil {
		return x.ServiceID
	}
	return ""
}

func (x *HVSocketListen) GetListenerPath() string {
	if x != nil {
		return x.ListenerPath
	}
	return ""
}

type VSockListen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port         uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	ListenerPath string `protobuf:"bytes,2,opt,name=listener_path,json=listenerPath,proto3" json:"listener_path,omitempty"`
}

func (x *VSockListen) Reset() {
	*x = VSockListen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSockListen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSockListen) ProtoMessage() {}

func (x *VSockListen) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSockListen.ProtoReflect.Descriptor instead.
func (*VSockListen) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{17}
}

func (x *VSockListen) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *VSockListen) GetListenerPath() string {
	if x != nil {
		return x.ListenerPath
	}
	return ""
}

type VMSocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ModifyType `protobuf:"varint,1,opt,name=type,proto3,enum=vmservice.ModifyType" json:"type,omitempty"`
	// Types that are assignable to Config:
	//
	//	*VMSocketRequest_HvsocketList
	//	*VMSocketRequest_VsockListen
	Config isVMSocketRequest_Config `protobuf_oneof:"Config"`
}

func (x *VMSocketRequest) Reset() {
	*x = VMSocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMSocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMSocketRequest) ProtoMessage() {}

func (x *VMSocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMSocketRequest.ProtoReflect.Descriptor instead.
func (*VMSocketRequest) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{18}
}

func (x *VMSocketRequest) GetType() ModifyType {
	if x != nil {
		return x.Type
	}
	return ModifyType_ADD
}

func (m *VMSocketRequest) GetConfig() isVMSocketRequest_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *VMSocketRequest) GetHvsocketList() *HVSocketListen {
	if x, ok := x.GetConfig().(*VMSocketRequest_HvsocketList); ok {
		return x.HvsocketList
	}
	return nil
}

func (x *VMSocketRequest) GetVsockListen() *VSockListen {
	if x, ok := x.GetConfig().(*VMSocketRequest_VsockListen); ok {
		return x.VsockListen
	}
	return nil
}

type isVMSocketRequest_Config interface {
	isVMSocketRequest_Config()
}

type VMSocketRequest_HvsocketList struct {
	HvsocketList *HVSocketListen `protobuf:"bytes,2,opt,name=hvsocket_list,json=hvsocketList,proto3,oneof"`
}

type VMSocketRequest_VsockListen struct {
	VsockListen *VSockListen `protobuf:"bytes,3,opt,name=vsock_listen,json=vsockListen,proto3,oneof"`
}

func (*VMSocketRequest_HvsocketList) isVMSocketRequest_Config() {}

func (*VMSocketRequest_VsockListen) isVMSocketRequest_Config() {}

type SCSIDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller uint32   `protobuf:"varint,1,opt,name=controller,proto3" json:"controller,omitempty"`
	Lun        uint32   `protobuf:"varint,2,opt,name=lun,proto3" json:"lun,omitempty"`
	HostPath   string   `protobuf:"bytes,3,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	Type       DiskType `protobuf:"varint,4,opt,name=type,proto3,enum=vmservice.DiskType" json:"type,omitempty"`
	ReadOnly   bool     `protobuf:"varint,5,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
}

func (x *SCSIDisk) Reset() {
	*x = SCSIDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCSIDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCSIDisk) ProtoMessage() {}

func (x *SCSIDisk) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCSIDisk.ProtoReflect.Descriptor instead.
func (*SCSIDisk) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{19}
}

func (x *SCSIDisk) GetController() uint32 {
	if x != nil {
		return x.Controller
	}
	return 0
}

func (x *SCSIDisk) GetLun() uint32 {
	if x != nil {
		return x.Lun
	}
	return 0
}

func (x *SCSIDisk) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *SCSIDisk) GetType() DiskType {
	if x != nil {
		return x.Type
	}
	return DiskType_SCSI_DISK_TYPE_VHD1
}

func (x *SCSIDisk) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type VPMEMDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostPath string   `protobuf:"bytes,1,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty"`
	Type     DiskType `protobuf:"varint,2,opt,name=type,proto3,enum=vmservice.DiskType" json:"type,omitempty"`
	ReadOnly bool     `protobuf:"varint,3,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
}

func (x *VPMEMDisk) Reset() {
	*x = VPMEMDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPMEMDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPMEMDisk) ProtoMessage() {}

func (x *VPMEMDisk) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPMEMDisk.ProtoReflect.Descriptor instead.
func (*VPMEMDisk) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{20}
}

func (x *VPMEMDisk) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *VPMEMDisk) GetType() DiskType {
	if x != nil {
		return x.Type
	}
	return DiskType_SCSI_DISK_TYPE_VHD1
}

func (x *VPMEMDisk) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type NICConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NicID      string `protobuf:"bytes,1,opt,name=nic_id,json=nicId,proto3" json:"nic_id,omitempty"`                // GUID
	PortID     string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`             // GUID
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"` // 12-34-56-78-9A-BC
	SwitchID   string `protobuf:"bytes,4,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`       // GUID
	// Optional friendly name for the adapter. Might be useful to show up in logs.
	NicName string `protobuf:"bytes,5,opt,name=nic_name,json=nicName,proto3" json:"nic_name,omitempty"`
}

func (x *NICConfig) Reset() {
	*x = NICConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NICConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NICConfig) ProtoMessage() {}

func (x *NICConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NICConfig.ProtoReflect.Descriptor instead.
func (*NICConfig) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{21}
}

func (x *NICConfig) GetNicID() string {
	if x != nil {
		return x.NicID
	}
	return ""
}

func (x *NICConfig) GetPortID() string {
	if x != nil {
		return x.PortID
	}
	return ""
}

func (x *NICConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NICConfig) GetSwitchID() string {
	if x != nil {
		return x.SwitchID
	}
	return ""
}

func (x *NICConfig) GetNicName() string {
	if x != nil {
		return x.NicName
	}
	return ""
}

type WindowsPCIDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// e.g. PCIP\\VEN_10DE&DEV_13F2&SUBSYS_115E10DE&REV_A1\\6&17F903&0&00400000
	InstanceID string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *WindowsPCIDevice) Reset() {
	*x = WindowsPCIDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsPCIDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsPCIDevice) ProtoMessage() {}

func (x *WindowsPCIDevice) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsPCIDevice.ProtoReflect.Descriptor instead.
func (*WindowsPCIDevice) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{22}
}

func (x *WindowsPCIDevice) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

type ModifyMemoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryMb uint64 `protobuf:"varint,1,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
}

func (x *ModifyMemoryRequest) Reset() {
	*x = ModifyMemoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMemoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMemoryRequest) ProtoMessage() {}

func (x *ModifyMemoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMemoryRequest.ProtoReflect.Descriptor instead.
func (*ModifyMemoryRequest) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{23}
}

func (x *ModifyMemoryRequest) GetMemoryMb() uint64 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

type ModifyProcessorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the processor to add/remove
	ProcessorIndex uint32 `protobuf:"varint,1,opt,name=processor_index,json=processorIndex,proto3" json:"processor_index,omitempty"`
}

func (x *ModifyProcessorRequest) Reset() {
	*x = ModifyProcessorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyProcessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyProcessorRequest) ProtoMessage() {}

func (x *ModifyProcessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyProcessorRequest.ProtoReflect.Descriptor instead.
func (*ModifyProcessorRequest) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{24}
}

func (x *ModifyProcessorRequest) GetProcessorIndex() uint32 {
	if x != nil {
		return x.ProcessorIndex
	}
	return 0
}

type ModifyProcessorConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessorWeight uint32 `protobuf:"varint,1,opt,name=processor_weight,json=processorWeight,proto3" json:"processor_weight,omitempty"`
	ProcessorLimit  uint32 `protobuf:"varint,2,opt,name=processor_limit,json=processorLimit,proto3" json:"processor_limit,omitempty"`
}

func (x *ModifyProcessorConfigRequest) Reset() {
	*x = ModifyProcessorConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyProcessorConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyProcessorConfigRequest) ProtoMessage() {}

func (x *ModifyProcessorConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyProcessorConfigRequest.ProtoReflect.Descriptor instead.
func (*ModifyProcessorConfigRequest) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{25}
}

func (x *ModifyProcessorConfigRequest) GetProcessorWeight() uint32 {
	if x != nil {
		return x.ProcessorWeight
	}
	return 0
}

func (x *ModifyProcessorConfigRequest) GetProcessorLimit() uint32 {
	if x != nil {
		return x.ProcessorLimit
	}
	return 0
}

type ModifyResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ModifyType `protobuf:"varint,1,opt,name=type,proto3,enum=vmservice.ModifyType" json:"type,omitempty"`
	// Types that are assignable to Resource:
	//
	//	*ModifyResourceRequest_Processor
	//	*ModifyResourceRequest_ProcessorConfig
	//	*ModifyResourceRequest_Memory
	//	*ModifyResourceRequest_ScsiDisk
	//	*ModifyResourceRequest_VpmemDisk
	//	*ModifyResourceRequest_NicConfig
	//	*ModifyResourceRequest_WindowsDevice
	Resource isModifyResourceRequest_Resource `protobuf_oneof:"resource"`
}

func (x *ModifyResourceRequest) Reset() {
	*x = ModifyResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyResourceRequest) ProtoMessage() {}

func (x *ModifyResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyResourceRequest.ProtoReflect.Descriptor instead.
func (*ModifyResourceRequest) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{26}
}

func (x *ModifyResourceRequest) GetType() ModifyType {
	if x != nil {
		return x.Type
	}
	return ModifyType_ADD
}

func (m *ModifyResourceRequest) GetResource() isModifyResourceRequest_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *ModifyResourceRequest) GetProcessor() *ModifyProcessorRequest {
	if x, ok := x.GetResource().(*ModifyResourceRequest_Processor); ok {
		return x.Processor
	}
	return nil
}

func (x *ModifyResourceRequest) GetProcessorConfig() *ModifyProcessorConfigRequest {
	if x, ok := x.GetResource().(*ModifyResourceRequest_ProcessorConfig); ok {
		return x.ProcessorConfig
	}
	return nil
}

func (x *ModifyResourceRequest) GetMemory() *ModifyMemoryRequest {
	if x, ok := x.GetResource().(*ModifyResourceRequest_Memory); ok {
		return x.Memory
	}
	return nil
}

func (x *ModifyResourceRequest) GetScsiDisk() *SCSIDisk {
	if x, ok := x.GetResource().(*ModifyResourceRequest_ScsiDisk); ok {
		return x.ScsiDisk
	}
	return nil
}

func (x *ModifyResourceRequest) GetVpmemDisk() *VPMEMDisk {
	if x, ok := x.GetResource().(*ModifyResourceRequest_VpmemDisk); ok {
		return x.VpmemDisk
	}
	return nil
}

func (x *ModifyResourceRequest) GetNicConfig() *NICConfig {
	if x, ok := x.GetResource().(*ModifyResourceRequest_NicConfig); ok {
		return x.NicConfig
	}
	return nil
}

func (x *ModifyResourceRequest) GetWindowsDevice() *WindowsPCIDevice {
	if x, ok := x.GetResource().(*ModifyResourceRequest_WindowsDevice); ok {
		return x.WindowsDevice
	}
	return nil
}

type isModifyResourceRequest_Resource interface {
	isModifyResourceRequest_Resource()
}

type ModifyResourceRequest_Processor struct {
	Processor *ModifyProcessorRequest `protobuf:"bytes,2,opt,name=processor,proto3,oneof"`
}

type ModifyResourceRequest_ProcessorConfig struct {
	ProcessorConfig *ModifyProcessorConfigRequest `protobuf:"bytes,3,opt,name=processor_config,json=processorConfig,proto3,oneof"`
}

type ModifyResourceRequest_Memory struct {
	Memory *ModifyMemoryRequest `protobuf:"bytes,4,opt,name=memory,proto3,oneof"`
}

type ModifyResourceRequest_ScsiDisk struct {
	ScsiDisk *SCSIDisk `protobuf:"bytes,5,opt,name=scsi_disk,json=scsiDisk,proto3,oneof"`
}

type ModifyResourceRequest_VpmemDisk struct {
	VpmemDisk *VPMEMDisk `protobuf:"bytes,6,opt,name=vpmem_disk,json=vpmemDisk,proto3,oneof"`
}

type ModifyResourceRequest_NicConfig struct {
	NicConfig *NICConfig `protobuf:"bytes,7,opt,name=nic_config,json=nicConfig,proto3,oneof"`
}

type ModifyResourceRequest_WindowsDevice struct {
	WindowsDevice *WindowsPCIDevice `protobuf:"bytes,8,opt,name=windows_device,json=windowsDevice,proto3,oneof"`
}

func (*ModifyResourceRequest_Processor) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_ProcessorConfig) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_Memory) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_ScsiDisk) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_VpmemDisk) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_NicConfig) isModifyResourceRequest_Resource() {}

func (*ModifyResourceRequest_WindowsDevice) isModifyResourceRequest_Resource() {}

type SerialConfig_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Unix domain socket to relay serial console output to.
	SocketPath string `protobuf:"bytes,2,opt,name=socket_path,json=socketPath,proto3" json:"socket_path,omitempty"`
}

func (x *SerialConfig_Config) Reset() {
	*x = SerialConfig_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialConfig_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialConfig_Config) ProtoMessage() {}

func (x *SerialConfig_Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialConfig_Config.ProtoReflect.Descriptor instead.
func (*SerialConfig_Config) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SerialConfig_Config) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SerialConfig_Config) GetSocketPath() string {
	if x != nil {
		return x.SocketPath
	}
	return ""
}

type CapabilitiesVMResponse_SupportedResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add      bool                            `protobuf:"varint,1,opt,name=Add,proto3" json:"Add,omitempty"`
	Remove   bool                            `protobuf:"varint,2,opt,name=Remove,proto3" json:"Remove,omitempty"`
	Update   bool                            `protobuf:"varint,3,opt,name=Update,proto3" json:"Update,omitempty"`
	Resource CapabilitiesVMResponse_Resource `protobuf:"varint,4,opt,name=resource,proto3,enum=vmservice.CapabilitiesVMResponse_Resource" json:"resource,omitempty"`
}

func (x *CapabilitiesVMResponse_SupportedResource) Reset() {
	*x = CapabilitiesVMResponse_SupportedResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilitiesVMResponse_SupportedResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesVMResponse_SupportedResource) ProtoMessage() {}

func (x *CapabilitiesVMResponse_SupportedResource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesVMResponse_SupportedResource.ProtoReflect.Descriptor instead.
func (*CapabilitiesVMResponse_SupportedResource) Descriptor() ([]byte, []int) {
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CapabilitiesVMResponse_SupportedResource) GetAdd() bool {
	if x != nil {
		return x.Add
	}
	return false
}

func (x *CapabilitiesVMResponse_SupportedResource) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

func (x *CapabilitiesVMResponse_SupportedResource) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

func (x *CapabilitiesVMResponse_SupportedResource) GetResource() CapabilitiesVMResponse_Resource {
	if x != nil {
		return x.Resource
	}
	return CapabilitiesVMResponse_Vpmem
}

var File_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto protoreflect.FileDescriptor

var file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2f, 0x68, 0x63, 0x73, 0x73, 0x68, 0x69, 0x6d, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x75, 0x0a, 0x0a, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x69,
	0x74, 0x72, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x5f, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x71,
	0x0a, 0x04, 0x55, 0x45, 0x46, 0x49, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xed, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x64, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x69, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x12, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x6d, 0x69, 0x6f, 0x5f, 0x67, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x62, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x4d, 0x6d, 0x69, 0x6f, 0x47, 0x61, 0x70, 0x49,
	0x6e, 0x4d, 0x62, 0x12, 0x2e, 0x0a, 0x14, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6d, 0x6d, 0x69, 0x6f,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x4d, 0x6d, 0x69, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x4d, 0x62, 0x12, 0x2c, 0x0a, 0x13, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6d, 0x6d, 0x69, 0x6f,
	0x5f, 0x67, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x4d, 0x6d, 0x69, 0x6f, 0x47, 0x61, 0x70, 0x49, 0x6e, 0x4d,
	0x62, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x43, 0x53, 0x49, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x09, 0x73,
	0x63, 0x73, 0x69, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x76, 0x70, 0x6d, 0x65,
	0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x50, 0x4d, 0x45, 0x4d, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x0a, 0x76, 0x70, 0x6d, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12,
	0x33, 0x0a, 0x0a, 0x6e, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4e, 0x49, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x6e, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76,
	0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x50, 0x43, 0x49, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xc2, 0x04, 0x0a, 0x08, 0x56, 0x4d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76,
	0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x42, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42,
	0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x65, 0x66, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x45,
	0x46, 0x49, 0x48, 0x00, 0x52, 0x04, 0x75, 0x65, 0x66, 0x69, 0x12, 0x42, 0x0a, 0x0f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x32, 0x0a,
	0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x55, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x6d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x22, 0x51,
	0x0a, 0x10, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x43, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x56, 0x4d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22,
	0x3a, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x13,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x88, 0x04,
	0x0a, 0x16, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x56, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x56, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x60,
	0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x76, 0x6d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x53, 0x52, 0x10,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x73,
	0x1a, 0x9d, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x76, 0x6d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x5a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x56, 0x70, 0x6d, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x63, 0x73, 0x69, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x70, 0x63, 0x69, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x6c, 0x61, 0x6e, 0x39, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x4d, 0x4e, 0x69, 0x63, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x10, 0x06, 0x22, 0x2a, 0x0a, 0x10,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x53,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x10, 0x01, 0x22, 0x54, 0x0a, 0x0e, 0x48, 0x56, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x22, 0x46,
	0x0a, 0x0b, 0x56, 0x53, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x56, 0x4d, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x68, 0x76, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76,
	0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x56, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x76, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x73, 0x6f, 0x63, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x53, 0x6f, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x73, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9f,
	0x01, 0x0a, 0x08, 0x53, 0x43, 0x53, 0x49, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x75, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x22, 0x6e, 0x0a, 0x09, 0x56, 0x50, 0x4d, 0x45, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x22, 0x94, 0x01, 0x0a, 0x09, 0x4e, 0x49, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15,
	0x0a, 0x06, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x10, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x50, 0x43, 0x49, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x13,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62,
	0x22, 0x41, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x72, 0x0a, 0x1c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x54, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x6d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x32, 0x0a, 0x09, 0x73, 0x63, 0x73, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x43, 0x53, 0x49, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x73, 0x63, 0x73, 0x69, 0x44,
	0x69, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x76, 0x70, 0x6d, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x50, 0x4d, 0x45, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x00, 0x52,
	0x09, 0x76, 0x70, 0x6d, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x49, 0x43, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x44, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x6d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x43, 0x49,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2a, 0x2d, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x2a, 0x59, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x43, 0x53, 0x49, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x48, 0x44, 0x31, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x53, 0x49, 0x5f,
	0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x48, 0x44, 0x58, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x53, 0x49, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x32, 0xdd, 0x05,
	0x0a, 0x02, 0x56, 0x4d, 0x12, 0x3e, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d,
	0x12, 0x1a, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x56, 0x4d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x4d, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x56, 0x4d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x57, 0x61, 0x69,
	0x74, 0x56, 0x4d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x56, 0x4d,
	0x12, 0x1b, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x56, 0x4d, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x56, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56, 0x4d, 0x12, 0x1e, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56,
	0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x76, 0x6d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x56, 0x4d, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x1a, 0x2e, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x4d,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x31, 0x5a,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2f, 0x68, 0x63, 0x73, 0x73, 0x68, 0x69, 0x6d, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescOnce sync.Once
	file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescData = file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDesc
)

func file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescGZIP() []byte {
	file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescOnce.Do(func() {
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescData)
	})
	return file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDescData
}

var file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_goTypes = []interface{}{
	(ModifyType)(0),                                  // 0: vmservice.ModifyType
	(DiskType)(0),                                    // 1: vmservice.DiskType
	(PropertiesVMRequest_PropertiesType)(0),          // 2: vmservice.PropertiesVMRequest.PropertiesType
	(CapabilitiesVMResponse_Resource)(0),             // 3: vmservice.CapabilitiesVMResponse.Resource
	(CapabilitiesVMResponse_SupportedGuestOS)(0),     // 4: vmservice.CapabilitiesVMResponse.SupportedGuestOS
	(*DirectBoot)(nil),                               // 5: vmservice.DirectBoot
	(*UEFI)(nil),                                     // 6: vmservice.UEFI
	(*MemoryConfig)(nil),                             // 7: vmservice.MemoryConfig
	(*ProcessorConfig)(nil),                          // 8: vmservice.ProcessorConfig
	(*DevicesConfig)(nil),                            // 9: vmservice.DevicesConfig
	(*VMConfig)(nil),                                 // 10: vmservice.VMConfig
	(*WindowsOptions)(nil),                           // 11: vmservice.WindowsOptions
	(*SerialConfig)(nil),                             // 12: vmservice.SerialConfig
	(*CreateVMRequest)(nil),                          // 13: vmservice.CreateVMRequest
	(*InspectVMRequest)(nil),                         // 14: vmservice.InspectVMRequest
	(*InspectVMResponse)(nil),                        // 15: vmservice.InspectVMResponse
	(*MemoryStats)(nil),                              // 16: vmservice.MemoryStats
	(*ProcessorStats)(nil),                           // 17: vmservice.ProcessorStats
	(*PropertiesVMRequest)(nil),                      // 18: vmservice.PropertiesVMRequest
	(*PropertiesVMResponse)(nil),                     // 19: vmservice.PropertiesVMResponse
	(*CapabilitiesVMResponse)(nil),                   // 20: vmservice.CapabilitiesVMResponse
	(*HVSocketListen)(nil),                           // 21: vmservice.HVSocketListen
	(*VSockListen)(nil),                              // 22: vmservice.VSockListen
	(*VMSocketRequest)(nil),                          // 23: vmservice.VMSocketRequest
	(*SCSIDisk)(nil),                                 // 24: vmservice.SCSIDisk
	(*VPMEMDisk)(nil),                                // 25: vmservice.VPMEMDisk
	(*NICConfig)(nil),                                // 26: vmservice.NICConfig
	(*WindowsPCIDevice)(nil),                         // 27: vmservice.WindowsPCIDevice
	(*ModifyMemoryRequest)(nil),                      // 28: vmservice.ModifyMemoryRequest
	(*ModifyProcessorRequest)(nil),                   // 29: vmservice.ModifyProcessorRequest
	(*ModifyProcessorConfigRequest)(nil),             // 30: vmservice.ModifyProcessorConfigRequest
	(*ModifyResourceRequest)(nil),                    // 31: vmservice.ModifyResourceRequest
	nil,                                              // 32: vmservice.VMConfig.ExtraDataEntry
	(*SerialConfig_Config)(nil),                      // 33: vmservice.SerialConfig.Config
	(*CapabilitiesVMResponse_SupportedResource)(nil), // 34: vmservice.CapabilitiesVMResponse.SupportedResource
	(*structpb.Value)(nil),                           // 35: google.protobuf.Value
	(*emptypb.Empty)(nil),                            // 36: google.protobuf.Empty
}
var file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_depIdxs = []int32{
	24, // 0: vmservice.DevicesConfig.scsi_disks:type_name -> vmservice.SCSIDisk
	25, // 1: vmservice.DevicesConfig.vpmem_disks:type_name -> vmservice.VPMEMDisk
	26, // 2: vmservice.DevicesConfig.nic_config:type_name -> vmservice.NICConfig
	27, // 3: vmservice.DevicesConfig.windows_device:type_name -> vmservice.WindowsPCIDevice
	7,  // 4: vmservice.VMConfig.memory_config:type_name -> vmservice.MemoryConfig
	8,  // 5: vmservice.VMConfig.processor_config:type_name -> vmservice.ProcessorConfig
	9,  // 6: vmservice.VMConfig.devices_config:type_name -> vmservice.DevicesConfig
	12, // 7: vmservice.VMConfig.serial_config:type_name -> vmservice.SerialConfig
	5,  // 8: vmservice.VMConfig.direct_boot:type_name -> vmservice.DirectBoot
	6,  // 9: vmservice.VMConfig.uefi:type_name -> vmservice.UEFI
	11, // 10: vmservice.VMConfig.windows_options:type_name -> vmservice.WindowsOptions
	32, // 11: vmservice.VMConfig.extra_data:type_name -> vmservice.VMConfig.ExtraDataEntry
	33, // 12: vmservice.SerialConfig.ports:type_name -> vmservice.SerialConfig.Config
	10, // 13: vmservice.CreateVMRequest.config:type_name -> vmservice.VMConfig
	35, // 14: vmservice.InspectVMResponse.result:type_name -> google.protobuf.Value
	2,  // 15: vmservice.PropertiesVMRequest.types:type_name -> vmservice.PropertiesVMRequest.PropertiesType
	16, // 16: vmservice.PropertiesVMResponse.memory_stats:type_name -> vmservice.MemoryStats
	17, // 17: vmservice.PropertiesVMResponse.processor_stats:type_name -> vmservice.ProcessorStats
	34, // 18: vmservice.CapabilitiesVMResponse.supported_resources:type_name -> vmservice.CapabilitiesVMResponse.SupportedResource
	4,  // 19: vmservice.CapabilitiesVMResponse.supported_guest_os:type_name -> vmservice.CapabilitiesVMResponse.SupportedGuestOS
	0,  // 20: vmservice.VMSocketRequest.type:type_name -> vmservice.ModifyType
	21, // 21: vmservice.VMSocketRequest.hvsocket_list:type_name -> vmservice.HVSocketListen
	22, // 22: vmservice.VMSocketRequest.vsock_listen:type_name -> vmservice.VSockListen
	1,  // 23: vmservice.SCSIDisk.type:type_name -> vmservice.DiskType
	1,  // 24: vmservice.VPMEMDisk.type:type_name -> vmservice.DiskType
	0,  // 25: vmservice.ModifyResourceRequest.type:type_name -> vmservice.ModifyType
	29, // 26: vmservice.ModifyResourceRequest.processor:type_name -> vmservice.ModifyProcessorRequest
	30, // 27: vmservice.ModifyResourceRequest.processor_config:type_name -> vmservice.ModifyProcessorConfigRequest
	28, // 28: vmservice.ModifyResourceRequest.memory:type_name -> vmservice.ModifyMemoryRequest
	24, // 29: vmservice.ModifyResourceRequest.scsi_disk:type_name -> vmservice.SCSIDisk
	25, // 30: vmservice.ModifyResourceRequest.vpmem_disk:type_name -> vmservice.VPMEMDisk
	26, // 31: vmservice.ModifyResourceRequest.nic_config:type_name -> vmservice.NICConfig
	27, // 32: vmservice.ModifyResourceRequest.windows_device:type_name -> vmservice.WindowsPCIDevice
	3,  // 33: vmservice.CapabilitiesVMResponse.SupportedResource.resource:type_name -> vmservice.CapabilitiesVMResponse.Resource
	13, // 34: vmservice.VM.CreateVM:input_type -> vmservice.CreateVMRequest
	36, // 35: vmservice.VM.TeardownVM:input_type -> google.protobuf.Empty
	36, // 36: vmservice.VM.PauseVM:input_type -> google.protobuf.Empty
	36, // 37: vmservice.VM.ResumeVM:input_type -> google.protobuf.Empty
	36, // 38: vmservice.VM.WaitVM:input_type -> google.protobuf.Empty
	14, // 39: vmservice.VM.InspectVM:input_type -> vmservice.InspectVMRequest
	36, // 40: vmservice.VM.CapabilitiesVM:input_type -> google.protobuf.Empty
	18, // 41: vmservice.VM.PropertiesVM:input_type -> vmservice.PropertiesVMRequest
	31, // 42: vmservice.VM.ModifyResource:input_type -> vmservice.ModifyResourceRequest
	23, // 43: vmservice.VM.VMSocket:input_type -> vmservice.VMSocketRequest
	36, // 44: vmservice.VM.Quit:input_type -> google.protobuf.Empty
	36, // 45: vmservice.VM.CreateVM:output_type -> google.protobuf.Empty
	36, // 46: vmservice.VM.TeardownVM:output_type -> google.protobuf.Empty
	36, // 47: vmservice.VM.PauseVM:output_type -> google.protobuf.Empty
	36, // 48: vmservice.VM.ResumeVM:output_type -> google.protobuf.Empty
	36, // 49: vmservice.VM.WaitVM:output_type -> google.protobuf.Empty
	15, // 50: vmservice.VM.InspectVM:output_type -> vmservice.InspectVMResponse
	20, // 51: vmservice.VM.CapabilitiesVM:output_type -> vmservice.CapabilitiesVMResponse
	19, // 52: vmservice.VM.PropertiesVM:output_type -> vmservice.PropertiesVMResponse
	36, // 53: vmservice.VM.ModifyResource:output_type -> google.protobuf.Empty
	36, // 54: vmservice.VM.VMSocket:output_type -> google.protobuf.Empty
	36, // 55: vmservice.VM.Quit:output_type -> google.protobuf.Empty
	45, // [45:56] is the sub-list for method output_type
	34, // [34:45] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_init() }
func file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_init() {
	if File_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectBoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UEFI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerialConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertiesVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertiesVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilitiesVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HVSocketListen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VSockListen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMSocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCSIDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPMEMDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NICConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsPCIDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMemoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyProcessorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyProcessorConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerialConfig_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilitiesVMResponse_SupportedResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*VMConfig_DirectBoot)(nil),
		(*VMConfig_Uefi)(nil),
	}
	file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*VMSocketRequest_HvsocketList)(nil),
		(*VMSocketRequest_VsockListen)(nil),
	}
	file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*ModifyResourceRequest_Processor)(nil),
		(*ModifyResourceRequest_ProcessorConfig)(nil),
		(*ModifyResourceRequest_Memory)(nil),
		(*ModifyResourceRequest_ScsiDisk)(nil),
		(*ModifyResourceRequest_VpmemDisk)(nil),
		(*ModifyResourceRequest_NicConfig)(nil),
		(*ModifyResourceRequest_WindowsDevice)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_goTypes,
		DependencyIndexes: file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_depIdxs,
		EnumInfos:         file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_enumTypes,
		MessageInfos:      file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_msgTypes,
	}.Build()
	File_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto = out.File
	file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_rawDesc = nil
	file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_goTypes = nil
	file_github_com_Microsoft_hcsshim_internal_vmservice_vmservice_proto_depIdxs = nil
}
