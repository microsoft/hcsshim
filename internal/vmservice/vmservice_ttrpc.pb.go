// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: github.com/Microsoft/hcsshim/internal/vmservice/vmservice.proto
package vmservice

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type VMService interface {
	CreateVM(context.Context, *CreateVMRequest) (*emptypb.Empty, error)
	TeardownVM(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	PauseVM(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ResumeVM(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	WaitVM(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	InspectVM(context.Context, *InspectVMRequest) (*InspectVMResponse, error)
	CapabilitiesVM(context.Context, *emptypb.Empty) (*CapabilitiesVMResponse, error)
	PropertiesVM(context.Context, *PropertiesVMRequest) (*PropertiesVMResponse, error)
	ModifyResource(context.Context, *ModifyResourceRequest) (*emptypb.Empty, error)
	VMSocket(context.Context, *VMSocketRequest) (*emptypb.Empty, error)
	Quit(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

func RegisterVMService(srv *ttrpc.Server, svc VMService) {
	srv.RegisterService("vmservice.VM", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"CreateVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req CreateVMRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.CreateVM(ctx, &req)
			},
			"TeardownVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req emptypb.Empty
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.TeardownVM(ctx, &req)
			},
			"PauseVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req emptypb.Empty
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.PauseVM(ctx, &req)
			},
			"ResumeVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req emptypb.Empty
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ResumeVM(ctx, &req)
			},
			"WaitVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req emptypb.Empty
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.WaitVM(ctx, &req)
			},
			"InspectVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req InspectVMRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.InspectVM(ctx, &req)
			},
			"CapabilitiesVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req emptypb.Empty
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.CapabilitiesVM(ctx, &req)
			},
			"PropertiesVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req PropertiesVMRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.PropertiesVM(ctx, &req)
			},
			"ModifyResource": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ModifyResourceRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ModifyResource(ctx, &req)
			},
			"VMSocket": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req VMSocketRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.VMSocket(ctx, &req)
			},
			"Quit": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req emptypb.Empty
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Quit(ctx, &req)
			},
		},
	})
}

type vmClient struct {
	client *ttrpc.Client
}

func NewVMClient(client *ttrpc.Client) VMService {
	return &vmClient{
		client: client,
	}
}

func (c *vmClient) CreateVM(ctx context.Context, req *CreateVMRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "vmservice.VM", "CreateVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *vmClient) TeardownVM(ctx context.Context, req *emptypb.Empty) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "vmservice.VM", "TeardownVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *vmClient) PauseVM(ctx context.Context, req *emptypb.Empty) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "vmservice.VM", "PauseVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *vmClient) ResumeVM(ctx context.Context, req *emptypb.Empty) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "vmservice.VM", "ResumeVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *vmClient) WaitVM(ctx context.Context, req *emptypb.Empty) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "vmservice.VM", "WaitVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *vmClient) InspectVM(ctx context.Context, req *InspectVMRequest) (*InspectVMResponse, error) {
	var resp InspectVMResponse
	if err := c.client.Call(ctx, "vmservice.VM", "InspectVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *vmClient) CapabilitiesVM(ctx context.Context, req *emptypb.Empty) (*CapabilitiesVMResponse, error) {
	var resp CapabilitiesVMResponse
	if err := c.client.Call(ctx, "vmservice.VM", "CapabilitiesVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *vmClient) PropertiesVM(ctx context.Context, req *PropertiesVMRequest) (*PropertiesVMResponse, error) {
	var resp PropertiesVMResponse
	if err := c.client.Call(ctx, "vmservice.VM", "PropertiesVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *vmClient) ModifyResource(ctx context.Context, req *ModifyResourceRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "vmservice.VM", "ModifyResource", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *vmClient) VMSocket(ctx context.Context, req *VMSocketRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "vmservice.VM", "VMSocket", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *vmClient) Quit(ctx context.Context, req *emptypb.Empty) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "vmservice.VM", "Quit", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
