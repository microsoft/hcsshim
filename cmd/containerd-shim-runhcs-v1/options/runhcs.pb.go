// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/Microsoft/hcsshim/cmd/containerd-shim-runhcs-v1/options/runhcs.proto

package options

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Options_DebugType int32

const (
	Options_NPIPE Options_DebugType = 0
	Options_FILE  Options_DebugType = 1
	Options_ETW   Options_DebugType = 2
)

var Options_DebugType_name = map[int32]string{
	0: "NPIPE",
	1: "FILE",
	2: "ETW",
}

var Options_DebugType_value = map[string]int32{
	"NPIPE": 0,
	"FILE":  1,
	"ETW":   2,
}

func (x Options_DebugType) String() string {
	return proto.EnumName(Options_DebugType_name, int32(x))
}

func (Options_DebugType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b643df6839c75082, []int{0, 0}
}

type Options_SandboxIsolation int32

const (
	Options_PROCESS    Options_SandboxIsolation = 0
	Options_HYPERVISOR Options_SandboxIsolation = 1
)

var Options_SandboxIsolation_name = map[int32]string{
	0: "PROCESS",
	1: "HYPERVISOR",
}

var Options_SandboxIsolation_value = map[string]int32{
	"PROCESS":    0,
	"HYPERVISOR": 1,
}

func (x Options_SandboxIsolation) String() string {
	return proto.EnumName(Options_SandboxIsolation_name, int32(x))
}

func (Options_SandboxIsolation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b643df6839c75082, []int{0, 1}
}

// Options are the set of customizations that can be passed at Create time.
type Options struct {
	// Enable debug tracing (sets the logrus log level to debug). This may be deprecated in the future, prefer
	// log_level as this will override debug if both of them are set.
	Debug bool `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty"`
	// debug tracing output type
	DebugType Options_DebugType `protobuf:"varint,2,opt,name=debug_type,json=debugType,proto3,enum=containerd.runhcs.v1.Options_DebugType" json:"debug_type,omitempty"`
	// registry key root for storage of the runhcs container state
	RegistryRoot string `protobuf:"bytes,3,opt,name=registry_root,json=registryRoot,proto3" json:"registry_root,omitempty"`
	// sandbox_image is the image to use for the sandbox that matches the
	// sandbox_platform.
	SandboxImage string `protobuf:"bytes,4,opt,name=sandbox_image,json=sandboxImage,proto3" json:"sandbox_image,omitempty"`
	// sandbox_platform is a CRI setting that specifies the platform
	// architecture for all sandbox's in this runtime. Values are
	// 'windows/amd64' and 'linux/amd64'.
	SandboxPlatform string `protobuf:"bytes,5,opt,name=sandbox_platform,json=sandboxPlatform,proto3" json:"sandbox_platform,omitempty"`
	// sandbox_isolation is a CRI setting that specifies the isolation level of
	// the sandbox. For Windows runtime PROCESS and HYPERVISOR are valid. For
	// LCOW only HYPERVISOR is valid and default if omitted.
	SandboxIsolation Options_SandboxIsolation `protobuf:"varint,6,opt,name=sandbox_isolation,json=sandboxIsolation,proto3,enum=containerd.runhcs.v1.Options_SandboxIsolation" json:"sandbox_isolation,omitempty"`
	// boot_files_root_path is the path to the directory containing the LCOW
	// kernel and root FS files.
	BootFilesRootPath string `protobuf:"bytes,7,opt,name=boot_files_root_path,json=bootFilesRootPath,proto3" json:"boot_files_root_path,omitempty"`
	// vm_processor_count is the default number of processors to create for the
	// hypervisor isolated utility vm.
	//
	// The platform default if omitted is 2, unless the host only has a single
	// core in which case it is 1.
	VmProcessorCount int32 `protobuf:"varint,8,opt,name=vm_processor_count,json=vmProcessorCount,proto3" json:"vm_processor_count,omitempty"`
	// vm_memory_size_in_mb is the default amount of memory to assign to the
	// hypervisor isolated utility vm.
	//
	// The platform default is 1024MB if omitted.
	VmMemorySizeInMb int32 `protobuf:"varint,9,opt,name=vm_memory_size_in_mb,json=vmMemorySizeInMb,proto3" json:"vm_memory_size_in_mb,omitempty"`
	// GPUVHDPath is the path to the gpu vhd to add to the uvm
	// when a container requests a gpu
	GPUVHDPath string `protobuf:"bytes,10,opt,name=GPUVHDPath,proto3" json:"GPUVHDPath,omitempty"`
	// scale_cpu_limits_to_sandbox indicates that container CPU limits should
	// be adjusted to account for the difference in number of cores between the
	// host and UVM.
	ScaleCpuLimitsToSandbox bool `protobuf:"varint,11,opt,name=scale_cpu_limits_to_sandbox,json=scaleCpuLimitsToSandbox,proto3" json:"scale_cpu_limits_to_sandbox,omitempty"`
	// default_container_scratch_size_in_gb is the default scratch size (sandbox.vhdx)
	// to be used for containers. Every container will get a sandbox of `size_in_gb` assigned
	// instead of the default of 20GB.
	DefaultContainerScratchSizeInGb int32 `protobuf:"varint,12,opt,name=default_container_scratch_size_in_gb,json=defaultContainerScratchSizeInGb,proto3" json:"default_container_scratch_size_in_gb,omitempty"`
	// default_vm_scratch_size_in_gb is the default scratch size (sandbox.vhdx)
	// to be used for the UVM. This only applies to WCOW as LCOW doesn't mount a scratch
	// specifically for the UVM.
	DefaultVmScratchSizeInGb int32 `protobuf:"varint,13,opt,name=default_vm_scratch_size_in_gb,json=defaultVmScratchSizeInGb,proto3" json:"default_vm_scratch_size_in_gb,omitempty"`
	// share_scratch specifies if we'd like to reuse scratch space between multiple containers.
	// This currently only affects LCOW. The sandbox containers scratch space is re-used for all
	// subsequent containers launched in the pod.
	ShareScratch bool `protobuf:"varint,14,opt,name=share_scratch,json=shareScratch,proto3" json:"share_scratch,omitempty"`
	// NCProxyAddr is the address of the network configuration proxy service. If omitted
	// the network is setup locally.
	NCProxyAddr string `protobuf:"bytes,15,opt,name=NCProxyAddr,proto3" json:"NCProxyAddr,omitempty"`
	// log_level specifies the logrus log level for the shim. Supported values are a string representation of the
	// logrus log levels: "trace", "debug", "info", "warn", "error", "fatal", "panic". This setting will override
	// the `debug` field if both are specified, unless the level specified is also "debug", as these are equivalent.
	LogLevel                    string   `protobuf:"bytes,16,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	DefaultContainerShmSizeInKb int32    `protobuf:"varint,17,opt,name=default_container_shm_size_in_kb,json=defaultContainerShmSizeInKb,proto3" json:"default_container_shm_size_in_kb,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *Options) Reset()      { *m = Options{} }
func (*Options) ProtoMessage() {}
func (*Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_b643df6839c75082, []int{0}
}
func (m *Options) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Options.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Options.Merge(m, src)
}
func (m *Options) XXX_Size() int {
	return m.Size()
}
func (m *Options) XXX_DiscardUnknown() {
	xxx_messageInfo_Options.DiscardUnknown(m)
}

var xxx_messageInfo_Options proto.InternalMessageInfo

// ProcessDetails contains additional information about a process. This is the additional
// info returned in the Pids query.
type ProcessDetails struct {
	ImageName                    string    `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	CreatedAt                    time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	KernelTime_100Ns             uint64    `protobuf:"varint,3,opt,name=kernel_time_100_ns,json=kernelTime100Ns,proto3" json:"kernel_time_100_ns,omitempty"`
	MemoryCommitBytes            uint64    `protobuf:"varint,4,opt,name=memory_commit_bytes,json=memoryCommitBytes,proto3" json:"memory_commit_bytes,omitempty"`
	MemoryWorkingSetPrivateBytes uint64    `protobuf:"varint,5,opt,name=memory_working_set_private_bytes,json=memoryWorkingSetPrivateBytes,proto3" json:"memory_working_set_private_bytes,omitempty"`
	MemoryWorkingSetSharedBytes  uint64    `protobuf:"varint,6,opt,name=memory_working_set_shared_bytes,json=memoryWorkingSetSharedBytes,proto3" json:"memory_working_set_shared_bytes,omitempty"`
	ProcessID                    uint32    `protobuf:"varint,7,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	UserTime_100Ns               uint64    `protobuf:"varint,8,opt,name=user_time_100_ns,json=userTime100Ns,proto3" json:"user_time_100_ns,omitempty"`
	ExecID                       string    `protobuf:"bytes,9,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}  `json:"-"`
	XXX_unrecognized             []byte    `json:"-"`
	XXX_sizecache                int32     `json:"-"`
}

func (m *ProcessDetails) Reset()      { *m = ProcessDetails{} }
func (*ProcessDetails) ProtoMessage() {}
func (*ProcessDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_b643df6839c75082, []int{1}
}
func (m *ProcessDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessDetails.Merge(m, src)
}
func (m *ProcessDetails) XXX_Size() int {
	return m.Size()
}
func (m *ProcessDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessDetails proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("containerd.runhcs.v1.Options_DebugType", Options_DebugType_name, Options_DebugType_value)
	proto.RegisterEnum("containerd.runhcs.v1.Options_SandboxIsolation", Options_SandboxIsolation_name, Options_SandboxIsolation_value)
	proto.RegisterType((*Options)(nil), "containerd.runhcs.v1.Options")
	proto.RegisterType((*ProcessDetails)(nil), "containerd.runhcs.v1.ProcessDetails")
}

func init() {
	proto.RegisterFile("github.com/Microsoft/hcsshim/cmd/containerd-shim-runhcs-v1/options/runhcs.proto", fileDescriptor_b643df6839c75082)
}

var fileDescriptor_b643df6839c75082 = []byte{
	// 945 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x5b, 0x6f, 0xdb, 0x36,
	0x14, 0xc7, 0xad, 0xe6, 0x62, 0xeb, 0xe4, 0xe6, 0x70, 0x01, 0x26, 0x24, 0xab, 0x6d, 0xa4, 0x03,
	0x9a, 0x62, 0x8d, 0x94, 0x74, 0x8f, 0x1b, 0x30, 0x34, 0xb6, 0xd3, 0x7a, 0xcb, 0xc5, 0x90, 0xb3,
	0x74, 0x97, 0x07, 0x42, 0x17, 0x46, 0x12, 0x22, 0x8a, 0x82, 0x48, 0x7b, 0x71, 0x9f, 0xf6, 0x11,
	0xf6, 0x85, 0xf6, 0x9e, 0xc7, 0x3d, 0x0e, 0x18, 0x90, 0xad, 0xfe, 0x24, 0x03, 0x29, 0xca, 0xed,
	0xb2, 0x60, 0x2f, 0x7b, 0xb2, 0xf4, 0x3f, 0x3f, 0xfe, 0x79, 0xce, 0x11, 0x0f, 0x0d, 0xe7, 0x51,
	0x22, 0xe2, 0xb1, 0x6f, 0x07, 0x8c, 0x3a, 0xa7, 0x49, 0x50, 0x30, 0xce, 0xae, 0x84, 0x13, 0x07,
	0x9c, 0xc7, 0x09, 0x75, 0x02, 0x1a, 0x3a, 0x01, 0xcb, 0x84, 0x97, 0x64, 0xa4, 0x08, 0xf7, 0xa5,
	0xb6, 0x5f, 0x8c, 0xb3, 0x38, 0xe0, 0xfb, 0x93, 0x43, 0x87, 0xe5, 0x22, 0x61, 0x19, 0x77, 0x4a,
	0xc5, 0xce, 0x0b, 0x26, 0x18, 0xda, 0x7a, 0xcf, 0xdb, 0x3a, 0x30, 0x39, 0xdc, 0xde, 0x8a, 0x58,
	0xc4, 0x14, 0xe0, 0xc8, 0xa7, 0x92, 0xdd, 0x6e, 0x47, 0x8c, 0x45, 0x29, 0x71, 0xd4, 0x9b, 0x3f,
	0xbe, 0x72, 0x44, 0x42, 0x09, 0x17, 0x1e, 0xcd, 0x4b, 0x60, 0xf7, 0xd7, 0x3a, 0xd4, 0xcf, 0xcb,
	0x5d, 0xd0, 0x16, 0x2c, 0x85, 0xc4, 0x1f, 0x47, 0x96, 0xd1, 0x31, 0xf6, 0x1a, 0x6e, 0xf9, 0x82,
	0x8e, 0x01, 0xd4, 0x03, 0x16, 0xd3, 0x9c, 0x58, 0x8f, 0x3a, 0xc6, 0xde, 0xfa, 0x8b, 0xa7, 0xf6,
	0x43, 0x39, 0xd8, 0xda, 0xc8, 0xee, 0x49, 0xfe, 0x62, 0x9a, 0x13, 0xd7, 0x0c, 0xab, 0x47, 0xf4,
	0x04, 0xd6, 0x0a, 0x12, 0x25, 0x5c, 0x14, 0x53, 0x5c, 0x30, 0x26, 0xac, 0x85, 0x8e, 0xb1, 0x67,
	0xba, 0xab, 0x95, 0xe8, 0x32, 0x26, 0x24, 0xc4, 0xbd, 0x2c, 0xf4, 0xd9, 0x0d, 0x4e, 0xa8, 0x17,
	0x11, 0x6b, 0xb1, 0x84, 0xb4, 0x38, 0x90, 0x1a, 0x7a, 0x06, 0xcd, 0x0a, 0xca, 0x53, 0x4f, 0x5c,
	0xb1, 0x82, 0x5a, 0x4b, 0x8a, 0xdb, 0xd0, 0xfa, 0x50, 0xcb, 0xe8, 0x47, 0xd8, 0x9c, 0xfb, 0x71,
	0x96, 0x7a, 0x32, 0x3f, 0x6b, 0x59, 0xd5, 0x60, 0xff, 0x77, 0x0d, 0x23, 0xbd, 0x63, 0xb5, 0xca,
	0xad, 0xf6, 0x9c, 0x2b, 0xc8, 0x81, 0x2d, 0x9f, 0x31, 0x81, 0xaf, 0x92, 0x94, 0x70, 0x55, 0x13,
	0xce, 0x3d, 0x11, 0x5b, 0x75, 0x95, 0xcb, 0xa6, 0x8c, 0x1d, 0xcb, 0x90, 0xac, 0x6c, 0xe8, 0x89,
	0x18, 0x3d, 0x07, 0x34, 0xa1, 0x38, 0x2f, 0x58, 0x40, 0x38, 0x67, 0x05, 0x0e, 0xd8, 0x38, 0x13,
	0x56, 0xa3, 0x63, 0xec, 0x2d, 0xb9, 0xcd, 0x09, 0x1d, 0x56, 0x81, 0xae, 0xd4, 0x91, 0x0d, 0x5b,
	0x13, 0x8a, 0x29, 0xa1, 0xac, 0x98, 0x62, 0x9e, 0xbc, 0x25, 0x38, 0xc9, 0x30, 0xf5, 0x2d, 0xb3,
	0xe2, 0x4f, 0x55, 0x68, 0x94, 0xbc, 0x25, 0x83, 0xec, 0xd4, 0x47, 0x2d, 0x80, 0x57, 0xc3, 0x6f,
	0x2f, 0x5f, 0xf7, 0xe4, 0x5e, 0x16, 0xa8, 0x24, 0x3e, 0x50, 0xd0, 0x97, 0xb0, 0xc3, 0x03, 0x2f,
	0x25, 0x38, 0xc8, 0xc7, 0x38, 0x4d, 0x68, 0x22, 0x38, 0x16, 0x0c, 0xeb, 0xb2, 0xac, 0x15, 0xf5,
	0xd1, 0x3f, 0x56, 0x48, 0x37, 0x1f, 0x9f, 0x28, 0xe0, 0x82, 0xe9, 0x3e, 0xa0, 0x53, 0xf8, 0x34,
	0x24, 0x57, 0xde, 0x38, 0x15, 0x78, 0xde, 0x37, 0xcc, 0x83, 0xc2, 0x13, 0x41, 0x3c, 0xcf, 0x2e,
	0xf2, 0xad, 0x55, 0x95, 0x5d, 0x5b, 0xb3, 0xdd, 0x0a, 0x1d, 0x95, 0x64, 0x99, 0xec, 0x2b, 0x1f,
	0x7d, 0x05, 0x8f, 0x2b, 0xbb, 0x09, 0x7d, 0xc8, 0x67, 0x4d, 0xf9, 0x58, 0x1a, 0xba, 0xa4, 0xf7,
	0x0d, 0xe4, 0x49, 0x89, 0xbd, 0x82, 0x54, 0x6b, 0xad, 0x75, 0x95, 0xff, 0xaa, 0x12, 0x35, 0x8c,
	0x3a, 0xb0, 0x72, 0xd6, 0x1d, 0x16, 0xec, 0x66, 0xfa, 0x32, 0x0c, 0x0b, 0x6b, 0x43, 0xf5, 0xe4,
	0x43, 0x09, 0xed, 0x80, 0x99, 0xb2, 0x08, 0xa7, 0x64, 0x42, 0x52, 0xab, 0xa9, 0xe2, 0x8d, 0x94,
	0x45, 0x27, 0xf2, 0x1d, 0xf5, 0xa1, 0xf3, 0x40, 0xcd, 0x31, 0x9d, 0xe7, 0x79, 0xed, 0x5b, 0x9b,
	0x2a, 0xcf, 0x9d, 0x7f, 0xd5, 0x1b, 0xd3, 0x32, 0xd5, 0x6f, 0xfc, 0xdd, 0x67, 0x60, 0xce, 0x27,
	0x02, 0x99, 0xb0, 0x74, 0x36, 0x1c, 0x0c, 0xfb, 0xcd, 0x1a, 0x6a, 0xc0, 0xe2, 0xf1, 0xe0, 0xa4,
	0xdf, 0x34, 0x50, 0x1d, 0x16, 0xfa, 0x17, 0x6f, 0x9a, 0x8f, 0x76, 0x1d, 0x68, 0xde, 0x3f, 0x78,
	0x68, 0x05, 0xea, 0x43, 0xf7, 0xbc, 0xdb, 0x1f, 0x8d, 0x9a, 0x35, 0xb4, 0x0e, 0xf0, 0xfa, 0xfb,
	0x61, 0xdf, 0xbd, 0x1c, 0x8c, 0xce, 0xdd, 0xa6, 0xb1, 0xfb, 0xc7, 0x02, 0xac, 0xeb, 0x73, 0xd3,
	0x23, 0xc2, 0x4b, 0x52, 0x8e, 0x1e, 0x03, 0xa8, 0xd9, 0xc1, 0x99, 0x47, 0x89, 0x9a, 0x65, 0xd3,
	0x35, 0x95, 0x72, 0xe6, 0x51, 0x82, 0xba, 0x00, 0x41, 0x41, 0x3c, 0x41, 0x42, 0xec, 0x09, 0x35,
	0xcf, 0x2b, 0x2f, 0xb6, 0xed, 0xf2, 0x9e, 0xb0, 0xab, 0x7b, 0xc2, 0xbe, 0xa8, 0xee, 0x89, 0xa3,
	0xc6, 0xed, 0x5d, 0xbb, 0xf6, 0xcb, 0x9f, 0x6d, 0xc3, 0x35, 0xf5, 0xba, 0x97, 0x02, 0x7d, 0x06,
	0xe8, 0x9a, 0x14, 0x19, 0x49, 0xb1, 0xbc, 0x50, 0xf0, 0xe1, 0xc1, 0x01, 0xce, 0xb8, 0x9a, 0xe8,
	0x45, 0x77, 0xa3, 0x8c, 0x48, 0x87, 0xc3, 0x83, 0x83, 0x33, 0x8e, 0x6c, 0xf8, 0x48, 0x9f, 0xe2,
	0x80, 0x51, 0x9a, 0x08, 0xec, 0x4f, 0x05, 0xe1, 0x6a, 0xb4, 0x17, 0xdd, 0xcd, 0x32, 0xd4, 0x55,
	0x91, 0x23, 0x19, 0x40, 0xc7, 0xd0, 0xd1, 0xfc, 0x4f, 0xac, 0xb8, 0x4e, 0xb2, 0x08, 0x73, 0x22,
	0x70, 0x5e, 0x24, 0x13, 0x4f, 0x10, 0xbd, 0x78, 0x49, 0x2d, 0xfe, 0xa4, 0xe4, 0xde, 0x94, 0xd8,
	0x88, 0x88, 0x61, 0x09, 0x95, 0x3e, 0x3d, 0x68, 0x3f, 0xe0, 0xa3, 0x0e, 0x48, 0xa8, 0x6d, 0x96,
	0x95, 0xcd, 0xce, 0x7d, 0x9b, 0x91, 0x62, 0x4a, 0x97, 0xe7, 0x00, 0x7a, 0x62, 0x71, 0x12, 0xaa,
	0xd9, 0x5e, 0x3b, 0x5a, 0x9b, 0xdd, 0xb5, 0x4d, 0xdd, 0xf6, 0x41, 0xcf, 0x35, 0x35, 0x30, 0x08,
	0xd1, 0x53, 0x68, 0x8e, 0x39, 0x29, 0xfe, 0xd1, 0x96, 0x86, 0xda, 0x64, 0x4d, 0xea, 0xef, 0x9b,
	0xf2, 0x04, 0xea, 0xe4, 0x86, 0x04, 0xd2, 0x53, 0x0e, 0xb4, 0x79, 0x04, 0xb3, 0xbb, 0xf6, 0x72,
	0xff, 0x86, 0x04, 0x83, 0x9e, 0xbb, 0x2c, 0x43, 0x83, 0xf0, 0x28, 0xbc, 0x7d, 0xd7, 0xaa, 0xfd,
	0xfe, 0xae, 0x55, 0xfb, 0x79, 0xd6, 0x32, 0x6e, 0x67, 0x2d, 0xe3, 0xb7, 0x59, 0xcb, 0xf8, 0x6b,
	0xd6, 0x32, 0x7e, 0xf8, 0xfa, 0xff, 0xff, 0xab, 0x7c, 0xa1, 0x7f, 0xbf, 0xab, 0xf9, 0xcb, 0xea,
	0xbb, 0x7f, 0xfe, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0xa9, 0x17, 0x5b, 0xac, 0x06, 0x00,
	0x00,
}

func (m *Options) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Options) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Options) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DefaultContainerShmSizeInKb != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.DefaultContainerShmSizeInKb))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.LogLevel) > 0 {
		i -= len(m.LogLevel)
		copy(dAtA[i:], m.LogLevel)
		i = encodeVarintRunhcs(dAtA, i, uint64(len(m.LogLevel)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.NCProxyAddr) > 0 {
		i -= len(m.NCProxyAddr)
		copy(dAtA[i:], m.NCProxyAddr)
		i = encodeVarintRunhcs(dAtA, i, uint64(len(m.NCProxyAddr)))
		i--
		dAtA[i] = 0x7a
	}
	if m.ShareScratch {
		i--
		if m.ShareScratch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.DefaultVmScratchSizeInGb != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.DefaultVmScratchSizeInGb))
		i--
		dAtA[i] = 0x68
	}
	if m.DefaultContainerScratchSizeInGb != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.DefaultContainerScratchSizeInGb))
		i--
		dAtA[i] = 0x60
	}
	if m.ScaleCpuLimitsToSandbox {
		i--
		if m.ScaleCpuLimitsToSandbox {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.GPUVHDPath) > 0 {
		i -= len(m.GPUVHDPath)
		copy(dAtA[i:], m.GPUVHDPath)
		i = encodeVarintRunhcs(dAtA, i, uint64(len(m.GPUVHDPath)))
		i--
		dAtA[i] = 0x52
	}
	if m.VmMemorySizeInMb != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.VmMemorySizeInMb))
		i--
		dAtA[i] = 0x48
	}
	if m.VmProcessorCount != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.VmProcessorCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BootFilesRootPath) > 0 {
		i -= len(m.BootFilesRootPath)
		copy(dAtA[i:], m.BootFilesRootPath)
		i = encodeVarintRunhcs(dAtA, i, uint64(len(m.BootFilesRootPath)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SandboxIsolation != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.SandboxIsolation))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SandboxPlatform) > 0 {
		i -= len(m.SandboxPlatform)
		copy(dAtA[i:], m.SandboxPlatform)
		i = encodeVarintRunhcs(dAtA, i, uint64(len(m.SandboxPlatform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SandboxImage) > 0 {
		i -= len(m.SandboxImage)
		copy(dAtA[i:], m.SandboxImage)
		i = encodeVarintRunhcs(dAtA, i, uint64(len(m.SandboxImage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RegistryRoot) > 0 {
		i -= len(m.RegistryRoot)
		copy(dAtA[i:], m.RegistryRoot)
		i = encodeVarintRunhcs(dAtA, i, uint64(len(m.RegistryRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DebugType != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.DebugType))
		i--
		dAtA[i] = 0x10
	}
	if m.Debug {
		i--
		if m.Debug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExecID) > 0 {
		i -= len(m.ExecID)
		copy(dAtA[i:], m.ExecID)
		i = encodeVarintRunhcs(dAtA, i, uint64(len(m.ExecID)))
		i--
		dAtA[i] = 0x4a
	}
	if m.UserTime_100Ns != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.UserTime_100Ns))
		i--
		dAtA[i] = 0x40
	}
	if m.ProcessID != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.ProcessID))
		i--
		dAtA[i] = 0x38
	}
	if m.MemoryWorkingSetSharedBytes != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.MemoryWorkingSetSharedBytes))
		i--
		dAtA[i] = 0x30
	}
	if m.MemoryWorkingSetPrivateBytes != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.MemoryWorkingSetPrivateBytes))
		i--
		dAtA[i] = 0x28
	}
	if m.MemoryCommitBytes != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.MemoryCommitBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.KernelTime_100Ns != 0 {
		i = encodeVarintRunhcs(dAtA, i, uint64(m.KernelTime_100Ns))
		i--
		dAtA[i] = 0x18
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintRunhcs(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.ImageName) > 0 {
		i -= len(m.ImageName)
		copy(dAtA[i:], m.ImageName)
		i = encodeVarintRunhcs(dAtA, i, uint64(len(m.ImageName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRunhcs(dAtA []byte, offset int, v uint64) int {
	offset -= sovRunhcs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Options) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Debug {
		n += 2
	}
	if m.DebugType != 0 {
		n += 1 + sovRunhcs(uint64(m.DebugType))
	}
	l = len(m.RegistryRoot)
	if l > 0 {
		n += 1 + l + sovRunhcs(uint64(l))
	}
	l = len(m.SandboxImage)
	if l > 0 {
		n += 1 + l + sovRunhcs(uint64(l))
	}
	l = len(m.SandboxPlatform)
	if l > 0 {
		n += 1 + l + sovRunhcs(uint64(l))
	}
	if m.SandboxIsolation != 0 {
		n += 1 + sovRunhcs(uint64(m.SandboxIsolation))
	}
	l = len(m.BootFilesRootPath)
	if l > 0 {
		n += 1 + l + sovRunhcs(uint64(l))
	}
	if m.VmProcessorCount != 0 {
		n += 1 + sovRunhcs(uint64(m.VmProcessorCount))
	}
	if m.VmMemorySizeInMb != 0 {
		n += 1 + sovRunhcs(uint64(m.VmMemorySizeInMb))
	}
	l = len(m.GPUVHDPath)
	if l > 0 {
		n += 1 + l + sovRunhcs(uint64(l))
	}
	if m.ScaleCpuLimitsToSandbox {
		n += 2
	}
	if m.DefaultContainerScratchSizeInGb != 0 {
		n += 1 + sovRunhcs(uint64(m.DefaultContainerScratchSizeInGb))
	}
	if m.DefaultVmScratchSizeInGb != 0 {
		n += 1 + sovRunhcs(uint64(m.DefaultVmScratchSizeInGb))
	}
	if m.ShareScratch {
		n += 2
	}
	l = len(m.NCProxyAddr)
	if l > 0 {
		n += 1 + l + sovRunhcs(uint64(l))
	}
	l = len(m.LogLevel)
	if l > 0 {
		n += 2 + l + sovRunhcs(uint64(l))
	}
	if m.DefaultContainerShmSizeInKb != 0 {
		n += 2 + sovRunhcs(uint64(m.DefaultContainerShmSizeInKb))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovRunhcs(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovRunhcs(uint64(l))
	if m.KernelTime_100Ns != 0 {
		n += 1 + sovRunhcs(uint64(m.KernelTime_100Ns))
	}
	if m.MemoryCommitBytes != 0 {
		n += 1 + sovRunhcs(uint64(m.MemoryCommitBytes))
	}
	if m.MemoryWorkingSetPrivateBytes != 0 {
		n += 1 + sovRunhcs(uint64(m.MemoryWorkingSetPrivateBytes))
	}
	if m.MemoryWorkingSetSharedBytes != 0 {
		n += 1 + sovRunhcs(uint64(m.MemoryWorkingSetSharedBytes))
	}
	if m.ProcessID != 0 {
		n += 1 + sovRunhcs(uint64(m.ProcessID))
	}
	if m.UserTime_100Ns != 0 {
		n += 1 + sovRunhcs(uint64(m.UserTime_100Ns))
	}
	l = len(m.ExecID)
	if l > 0 {
		n += 1 + l + sovRunhcs(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRunhcs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRunhcs(x uint64) (n int) {
	return sovRunhcs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Options) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Options{`,
		`Debug:` + fmt.Sprintf("%v", this.Debug) + `,`,
		`DebugType:` + fmt.Sprintf("%v", this.DebugType) + `,`,
		`RegistryRoot:` + fmt.Sprintf("%v", this.RegistryRoot) + `,`,
		`SandboxImage:` + fmt.Sprintf("%v", this.SandboxImage) + `,`,
		`SandboxPlatform:` + fmt.Sprintf("%v", this.SandboxPlatform) + `,`,
		`SandboxIsolation:` + fmt.Sprintf("%v", this.SandboxIsolation) + `,`,
		`BootFilesRootPath:` + fmt.Sprintf("%v", this.BootFilesRootPath) + `,`,
		`VmProcessorCount:` + fmt.Sprintf("%v", this.VmProcessorCount) + `,`,
		`VmMemorySizeInMb:` + fmt.Sprintf("%v", this.VmMemorySizeInMb) + `,`,
		`GPUVHDPath:` + fmt.Sprintf("%v", this.GPUVHDPath) + `,`,
		`ScaleCpuLimitsToSandbox:` + fmt.Sprintf("%v", this.ScaleCpuLimitsToSandbox) + `,`,
		`DefaultContainerScratchSizeInGb:` + fmt.Sprintf("%v", this.DefaultContainerScratchSizeInGb) + `,`,
		`DefaultVmScratchSizeInGb:` + fmt.Sprintf("%v", this.DefaultVmScratchSizeInGb) + `,`,
		`ShareScratch:` + fmt.Sprintf("%v", this.ShareScratch) + `,`,
		`NCProxyAddr:` + fmt.Sprintf("%v", this.NCProxyAddr) + `,`,
		`LogLevel:` + fmt.Sprintf("%v", this.LogLevel) + `,`,
		`DefaultContainerShmSizeInKb:` + fmt.Sprintf("%v", this.DefaultContainerShmSizeInKb) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessDetails{`,
		`ImageName:` + fmt.Sprintf("%v", this.ImageName) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`KernelTime_100Ns:` + fmt.Sprintf("%v", this.KernelTime_100Ns) + `,`,
		`MemoryCommitBytes:` + fmt.Sprintf("%v", this.MemoryCommitBytes) + `,`,
		`MemoryWorkingSetPrivateBytes:` + fmt.Sprintf("%v", this.MemoryWorkingSetPrivateBytes) + `,`,
		`MemoryWorkingSetSharedBytes:` + fmt.Sprintf("%v", this.MemoryWorkingSetSharedBytes) + `,`,
		`ProcessID:` + fmt.Sprintf("%v", this.ProcessID) + `,`,
		`UserTime_100Ns:` + fmt.Sprintf("%v", this.UserTime_100Ns) + `,`,
		`ExecID:` + fmt.Sprintf("%v", this.ExecID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRunhcs(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Options) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRunhcs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Options: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Options: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debug = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugType", wireType)
			}
			m.DebugType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugType |= Options_DebugType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunhcs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunhcs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunhcs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunhcs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SandboxImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxPlatform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunhcs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunhcs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SandboxPlatform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxIsolation", wireType)
			}
			m.SandboxIsolation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SandboxIsolation |= Options_SandboxIsolation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootFilesRootPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunhcs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunhcs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootFilesRootPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmProcessorCount", wireType)
			}
			m.VmProcessorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmProcessorCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmMemorySizeInMb", wireType)
			}
			m.VmMemorySizeInMb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmMemorySizeInMb |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GPUVHDPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunhcs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunhcs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GPUVHDPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleCpuLimitsToSandbox", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScaleCpuLimitsToSandbox = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultContainerScratchSizeInGb", wireType)
			}
			m.DefaultContainerScratchSizeInGb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultContainerScratchSizeInGb |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultVmScratchSizeInGb", wireType)
			}
			m.DefaultVmScratchSizeInGb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultVmScratchSizeInGb |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareScratch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShareScratch = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NCProxyAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunhcs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunhcs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NCProxyAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunhcs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunhcs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultContainerShmSizeInKb", wireType)
			}
			m.DefaultContainerShmSizeInKb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultContainerShmSizeInKb |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRunhcs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRunhcs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRunhcs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunhcs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunhcs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunhcs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunhcs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelTime_100Ns", wireType)
			}
			m.KernelTime_100Ns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KernelTime_100Ns |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryCommitBytes", wireType)
			}
			m.MemoryCommitBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryCommitBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryWorkingSetPrivateBytes", wireType)
			}
			m.MemoryWorkingSetPrivateBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryWorkingSetPrivateBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryWorkingSetSharedBytes", wireType)
			}
			m.MemoryWorkingSetSharedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryWorkingSetSharedBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessID", wireType)
			}
			m.ProcessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTime_100Ns", wireType)
			}
			m.UserTime_100Ns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserTime_100Ns |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunhcs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunhcs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRunhcs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRunhcs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRunhcs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRunhcs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRunhcs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRunhcs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRunhcs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRunhcs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRunhcs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRunhcs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRunhcs = fmt.Errorf("proto: unexpected end of group")
)
