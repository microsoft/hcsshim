// To regenerate api.pb.go run `make proto`
syntax = 'proto3';

package api.v1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

// CRIPluginService defines non-CRI APIs for cri plugin.
service CRIPluginService{
    // LoadImage loads a image into containerd.
    rpc LoadImage(LoadImageRequest) returns (LoadImageResponse) {}
    // ResetPodSandbox resets the state of a sandbox and any containers that are part of the
    // sandbox, recreating previously allocated resources (such as namespaces) that were freed
    // on stop, and retaining other resources.
    // This call is idempotent if the sandbox is in the ready state.
    rpc ResetPodSandbox(ResetPodSandboxRequest) returns (ResetPodSandboxResponse) {}
    // ResetContainer resets a stopped container back to the created state, keeping
    // its scratch space untouched.
    // This call is idempotent, and must not return an error if the container is already
    // in the created state.
    rpc ResetContainer(ResetContainerRequest) returns (ResetContainerResponse) {}
}

message LoadImageRequest {
    // FilePath is the absolute path of docker image tarball.
    string FilePath = 1;
}

message LoadImageResponse {
    // Images have been loaded.
    repeated string Images = 1;
}

message ResetPodSandboxRequest {
    // ID of the PodSandbox to reset.
    string pod_sandbox_id = 1;
}

message ResetPodSandboxResponse {}

message ResetContainerRequest {
    // ID of the container to reset.
    string container_id = 1;
}

message ResetContainerResponse {}
