// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// github.com/Microsoft/hcsshim/pkg/ncproxy/nodenetsvc/v0/nodenetsvc.proto is a deprecated file.

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeNetworkService_ConfigureNetworking_FullMethodName          = "/azure.nodenetworkservice.NodeNetworkService/ConfigureNetworking"
	NodeNetworkService_ConfigureContainerNetworking_FullMethodName = "/azure.nodenetworkservice.NodeNetworkService/ConfigureContainerNetworking"
	NodeNetworkService_PingNodeNetworkService_FullMethodName       = "/azure.nodenetworkservice.NodeNetworkService/PingNodeNetworkService"
	NodeNetworkService_GetHostLocalIpAddress_FullMethodName        = "/azure.nodenetworkservice.NodeNetworkService/GetHostLocalIpAddress"
)

// NodeNetworkServiceClient is the client API for NodeNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeNetworkServiceClient interface {
	ConfigureNetworking(ctx context.Context, in *ConfigureNetworkingRequest, opts ...grpc.CallOption) (*ConfigureNetworkingResponse, error)
	ConfigureContainerNetworking(ctx context.Context, in *ConfigureContainerNetworkingRequest, opts ...grpc.CallOption) (*ConfigureContainerNetworkingResponse, error)
	PingNodeNetworkService(ctx context.Context, in *PingNodeNetworkServiceRequest, opts ...grpc.CallOption) (*PingNodeNetworkServiceResponse, error)
	GetHostLocalIpAddress(ctx context.Context, in *GetHostLocalIpAddressRequest, opts ...grpc.CallOption) (*GetHostLocalIpAddressResponse, error)
}

type nodeNetworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeNetworkServiceClient(cc grpc.ClientConnInterface) NodeNetworkServiceClient {
	return &nodeNetworkServiceClient{cc}
}

func (c *nodeNetworkServiceClient) ConfigureNetworking(ctx context.Context, in *ConfigureNetworkingRequest, opts ...grpc.CallOption) (*ConfigureNetworkingResponse, error) {
	out := new(ConfigureNetworkingResponse)
	err := c.cc.Invoke(ctx, NodeNetworkService_ConfigureNetworking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeNetworkServiceClient) ConfigureContainerNetworking(ctx context.Context, in *ConfigureContainerNetworkingRequest, opts ...grpc.CallOption) (*ConfigureContainerNetworkingResponse, error) {
	out := new(ConfigureContainerNetworkingResponse)
	err := c.cc.Invoke(ctx, NodeNetworkService_ConfigureContainerNetworking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeNetworkServiceClient) PingNodeNetworkService(ctx context.Context, in *PingNodeNetworkServiceRequest, opts ...grpc.CallOption) (*PingNodeNetworkServiceResponse, error) {
	out := new(PingNodeNetworkServiceResponse)
	err := c.cc.Invoke(ctx, NodeNetworkService_PingNodeNetworkService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeNetworkServiceClient) GetHostLocalIpAddress(ctx context.Context, in *GetHostLocalIpAddressRequest, opts ...grpc.CallOption) (*GetHostLocalIpAddressResponse, error) {
	out := new(GetHostLocalIpAddressResponse)
	err := c.cc.Invoke(ctx, NodeNetworkService_GetHostLocalIpAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeNetworkServiceServer is the server API for NodeNetworkService service.
// All implementations must embed UnimplementedNodeNetworkServiceServer
// for forward compatibility
type NodeNetworkServiceServer interface {
	ConfigureNetworking(context.Context, *ConfigureNetworkingRequest) (*ConfigureNetworkingResponse, error)
	ConfigureContainerNetworking(context.Context, *ConfigureContainerNetworkingRequest) (*ConfigureContainerNetworkingResponse, error)
	PingNodeNetworkService(context.Context, *PingNodeNetworkServiceRequest) (*PingNodeNetworkServiceResponse, error)
	GetHostLocalIpAddress(context.Context, *GetHostLocalIpAddressRequest) (*GetHostLocalIpAddressResponse, error)
	mustEmbedUnimplementedNodeNetworkServiceServer()
}

// UnimplementedNodeNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeNetworkServiceServer struct {
}

func (UnimplementedNodeNetworkServiceServer) ConfigureNetworking(context.Context, *ConfigureNetworkingRequest) (*ConfigureNetworkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureNetworking not implemented")
}
func (UnimplementedNodeNetworkServiceServer) ConfigureContainerNetworking(context.Context, *ConfigureContainerNetworkingRequest) (*ConfigureContainerNetworkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureContainerNetworking not implemented")
}
func (UnimplementedNodeNetworkServiceServer) PingNodeNetworkService(context.Context, *PingNodeNetworkServiceRequest) (*PingNodeNetworkServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingNodeNetworkService not implemented")
}
func (UnimplementedNodeNetworkServiceServer) GetHostLocalIpAddress(context.Context, *GetHostLocalIpAddressRequest) (*GetHostLocalIpAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostLocalIpAddress not implemented")
}
func (UnimplementedNodeNetworkServiceServer) mustEmbedUnimplementedNodeNetworkServiceServer() {}

// UnsafeNodeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeNetworkServiceServer will
// result in compilation errors.
type UnsafeNodeNetworkServiceServer interface {
	mustEmbedUnimplementedNodeNetworkServiceServer()
}

func RegisterNodeNetworkServiceServer(s grpc.ServiceRegistrar, srv NodeNetworkServiceServer) {
	s.RegisterService(&NodeNetworkService_ServiceDesc, srv)
}

func _NodeNetworkService_ConfigureNetworking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureNetworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).ConfigureNetworking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeNetworkService_ConfigureNetworking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).ConfigureNetworking(ctx, req.(*ConfigureNetworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeNetworkService_ConfigureContainerNetworking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureContainerNetworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).ConfigureContainerNetworking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeNetworkService_ConfigureContainerNetworking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).ConfigureContainerNetworking(ctx, req.(*ConfigureContainerNetworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeNetworkService_PingNodeNetworkService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingNodeNetworkServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).PingNodeNetworkService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeNetworkService_PingNodeNetworkService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).PingNodeNetworkService(ctx, req.(*PingNodeNetworkServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeNetworkService_GetHostLocalIpAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostLocalIpAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeNetworkServiceServer).GetHostLocalIpAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeNetworkService_GetHostLocalIpAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeNetworkServiceServer).GetHostLocalIpAddress(ctx, req.(*GetHostLocalIpAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeNetworkService_ServiceDesc is the grpc.ServiceDesc for NodeNetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeNetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "azure.nodenetworkservice.NodeNetworkService",
	HandlerType: (*NodeNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureNetworking",
			Handler:    _NodeNetworkService_ConfigureNetworking_Handler,
		},
		{
			MethodName: "ConfigureContainerNetworking",
			Handler:    _NodeNetworkService_ConfigureContainerNetworking_Handler,
		},
		{
			MethodName: "PingNodeNetworkService",
			Handler:    _NodeNetworkService_PingNodeNetworkService_Handler,
		},
		{
			MethodName: "GetHostLocalIpAddress",
			Handler:    _NodeNetworkService_GetHostLocalIpAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/Microsoft/hcsshim/pkg/ncproxy/nodenetsvc/v0/nodenetsvc.proto",
}
